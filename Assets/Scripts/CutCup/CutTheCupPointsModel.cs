using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime.Serialization;
using Normal.Realtime;

[RealtimeModel]

public partial class CutTheCupPointsModel
{
    [RealtimeProperty(1, true, true)]
    private int _mobilePoints;

    [RealtimeProperty(2, true, true)]
    private int _vrPoints;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class CutTheCupPointsModel : RealtimeModel {
    public int mobilePoints {
        get {
            return _mobilePointsProperty.value;
        }
        set {
            if (_mobilePointsProperty.value == value) return;
            _mobilePointsProperty.value = value;
            InvalidateReliableLength();
            FireMobilePointsDidChange(value);
        }
    }
    
    public int vrPoints {
        get {
            return _vrPointsProperty.value;
        }
        set {
            if (_vrPointsProperty.value == value) return;
            _vrPointsProperty.value = value;
            InvalidateReliableLength();
            FireVrPointsDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(CutTheCupPointsModel model, T value);
    public event PropertyChangedHandler<int> mobilePointsDidChange;
    public event PropertyChangedHandler<int> vrPointsDidChange;
    
    public enum PropertyID : uint {
        MobilePoints = 1,
        VrPoints = 2,
    }
    
    #region Properties
    
    private ReliableProperty<int> _mobilePointsProperty;
    
    private ReliableProperty<int> _vrPointsProperty;
    
    #endregion
    
    public CutTheCupPointsModel() : base(null) {
        _mobilePointsProperty = new ReliableProperty<int>(1, _mobilePoints);
        _vrPointsProperty = new ReliableProperty<int>(2, _vrPoints);
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        _mobilePointsProperty.UnsubscribeCallback();
        _vrPointsProperty.UnsubscribeCallback();
    }
    
    private void FireMobilePointsDidChange(int value) {
        try {
            mobilePointsDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireVrPointsDidChange(int value) {
        try {
            vrPointsDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _mobilePointsProperty.WriteLength(context);
        length += _vrPointsProperty.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _mobilePointsProperty.Write(stream, context);
        writes |= _vrPointsProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.MobilePoints: {
                    changed = _mobilePointsProperty.Read(stream, context);
                    if (changed) FireMobilePointsDidChange(mobilePoints);
                    break;
                }
                case (uint) PropertyID.VrPoints: {
                    changed = _vrPointsProperty.Read(stream, context);
                    if (changed) FireVrPointsDidChange(vrPoints);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _mobilePoints = mobilePoints;
        _vrPoints = vrPoints;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
