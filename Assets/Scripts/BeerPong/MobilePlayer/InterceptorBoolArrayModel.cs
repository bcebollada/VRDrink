using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime.Serialization;
using Normal.Realtime;

[RealtimeModel]

public partial class InterceptorBoolArrayModel
{
    [RealtimeProperty(1, true, true)]
    private bool _activateInterceptor1;

    [RealtimeProperty(2, true, true)]
    private bool _activateInterceptor2;

    [RealtimeProperty(3, true, true)]
    private bool _activateInterceptor3;

}


/* ----- Begin Normal Autogenerated Code ----- */
public partial class InterceptorBoolArrayModel : RealtimeModel {
    public bool activateInterceptor1 {
        get {
            return _activateInterceptor1Property.value;
        }
        set {
            if (_activateInterceptor1Property.value == value) return;
            _activateInterceptor1Property.value = value;
            InvalidateReliableLength();
            FireActivateInterceptor1DidChange(value);
        }
    }
    
    public bool activateInterceptor2 {
        get {
            return _activateInterceptor2Property.value;
        }
        set {
            if (_activateInterceptor2Property.value == value) return;
            _activateInterceptor2Property.value = value;
            InvalidateReliableLength();
            FireActivateInterceptor2DidChange(value);
        }
    }
    
    public bool activateInterceptor3 {
        get {
            return _activateInterceptor3Property.value;
        }
        set {
            if (_activateInterceptor3Property.value == value) return;
            _activateInterceptor3Property.value = value;
            InvalidateReliableLength();
            FireActivateInterceptor3DidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(InterceptorBoolArrayModel model, T value);
    public event PropertyChangedHandler<bool> activateInterceptor1DidChange;
    public event PropertyChangedHandler<bool> activateInterceptor2DidChange;
    public event PropertyChangedHandler<bool> activateInterceptor3DidChange;
    
    public enum PropertyID : uint {
        ActivateInterceptor1 = 1,
        ActivateInterceptor2 = 2,
        ActivateInterceptor3 = 3,
    }
    
    #region Properties
    
    private ReliableProperty<bool> _activateInterceptor1Property;
    
    private ReliableProperty<bool> _activateInterceptor2Property;
    
    private ReliableProperty<bool> _activateInterceptor3Property;
    
    #endregion
    
    public InterceptorBoolArrayModel() : base(null) {
        _activateInterceptor1Property = new ReliableProperty<bool>(1, _activateInterceptor1);
        _activateInterceptor2Property = new ReliableProperty<bool>(2, _activateInterceptor2);
        _activateInterceptor3Property = new ReliableProperty<bool>(3, _activateInterceptor3);
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        _activateInterceptor1Property.UnsubscribeCallback();
        _activateInterceptor2Property.UnsubscribeCallback();
        _activateInterceptor3Property.UnsubscribeCallback();
    }
    
    private void FireActivateInterceptor1DidChange(bool value) {
        try {
            activateInterceptor1DidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireActivateInterceptor2DidChange(bool value) {
        try {
            activateInterceptor2DidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireActivateInterceptor3DidChange(bool value) {
        try {
            activateInterceptor3DidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _activateInterceptor1Property.WriteLength(context);
        length += _activateInterceptor2Property.WriteLength(context);
        length += _activateInterceptor3Property.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _activateInterceptor1Property.Write(stream, context);
        writes |= _activateInterceptor2Property.Write(stream, context);
        writes |= _activateInterceptor3Property.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.ActivateInterceptor1: {
                    changed = _activateInterceptor1Property.Read(stream, context);
                    if (changed) FireActivateInterceptor1DidChange(activateInterceptor1);
                    break;
                }
                case (uint) PropertyID.ActivateInterceptor2: {
                    changed = _activateInterceptor2Property.Read(stream, context);
                    if (changed) FireActivateInterceptor2DidChange(activateInterceptor2);
                    break;
                }
                case (uint) PropertyID.ActivateInterceptor3: {
                    changed = _activateInterceptor3Property.Read(stream, context);
                    if (changed) FireActivateInterceptor3DidChange(activateInterceptor3);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _activateInterceptor1 = activateInterceptor1;
        _activateInterceptor2 = activateInterceptor2;
        _activateInterceptor3 = activateInterceptor3;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
